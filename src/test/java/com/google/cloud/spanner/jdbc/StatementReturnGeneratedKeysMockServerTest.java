/*
 * Copyright 2023 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.cloud.spanner.jdbc;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import com.google.cloud.spanner.Dialect;
import com.google.cloud.spanner.MockSpannerServiceImpl.StatementResult;
import com.google.cloud.spanner.Statement;
import com.google.cloud.spanner.connection.AbstractMockServerTest;
import com.google.cloud.spanner.connection.RandomResultSetGenerator;
import com.google.cloud.spanner.connection.SpannerPool;
import com.google.common.collect.ImmutableList;
import com.google.longrunning.Operation;
import com.google.protobuf.Any;
import com.google.protobuf.Empty;
import com.google.protobuf.ListValue;
import com.google.protobuf.Value;
import com.google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata;
import com.google.spanner.v1.ResultSetMetadata;
import com.google.spanner.v1.ResultSetStats;
import com.google.spanner.v1.StructType;
import com.google.spanner.v1.StructType.Field;
import com.google.spanner.v1.Type;
import com.google.spanner.v1.TypeCode;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.runners.Parameterized.Parameter;
import org.junit.runners.Parameterized.Parameters;

@RunWith(Parameterized.class)
public class StatementReturnGeneratedKeysMockServerTest extends AbstractMockServerTest {
  @Parameter public Dialect dialect;

  @Parameters(name = "dialect = {0}")
  public static Object[] data() {
    return Dialect.values();
  }

  @Before
  public void setupDialect() {
    mockSpanner.putStatementResult(StatementResult.detectDialectResult(this.dialect));
  }

  @After
  public void clearRequests() {
    mockSpanner.clearRequests();
    // Close Spanner pool to force a refresh of the dialect of a given database.
    SpannerPool.closeSpannerPool();
  }

  private String createUrl() {
    return String.format(
        "jdbc:cloudspanner://localhost:%d/projects/%s/instances/%s/databases/%s?usePlainText=true",
        getPort(), "proj", "inst", "db");
  }

  @Override
  protected Connection createJdbcConnection() throws SQLException {
    return DriverManager.getConnection(createUrl());
  }

  interface SqlRunnable {
    void run() throws SQLException;
  }

  @Test
  public void testReturnAutoGeneratedKeys() throws SQLException {
    String sql = "insert into test (id, value) values (1, 'One')";
    String returningClause = dialect == Dialect.POSTGRESQL ? "\nRETURNING *" : "\nTHEN RETURN *";
    mockSpanner.putStatementResult(
        StatementResult.query(
            Statement.of(sql + returningClause),
            com.google.spanner.v1.ResultSet.newBuilder()
                .setMetadata(
                    ResultSetMetadata.newBuilder()
                        .setRowType(
                            StructType.newBuilder()
                                .addFields(
                                    Field.newBuilder()
                                        .setName("id")
                                        .setType(Type.newBuilder().setCode(TypeCode.INT64).build())
                                        .build())
                                .addFields(
                                    Field.newBuilder()
                                        .setName("value")
                                        .setType(Type.newBuilder().setCode(TypeCode.STRING).build())
                                        .build())
                                .build())
                        .build())
                .addRows(
                    ListValue.newBuilder()
                        .addValues(Value.newBuilder().setStringValue("1").build())
                        .addValues(Value.newBuilder().setStringValue("One").build())
                        .build())
                .setStats(ResultSetStats.newBuilder().setRowCountExact(1L).build())
                .build()));

    try (Connection connection = createJdbcConnection();
        java.sql.Statement statement = connection.createStatement()) {
      for (SqlRunnable runnable :
          ImmutableList.<SqlRunnable>of(
              () ->
                  assertEquals(
                      1, statement.executeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)),
              () ->
                  assertEquals(
                      1L,
                      statement.executeLargeUpdate(sql, java.sql.Statement.RETURN_GENERATED_KEYS)),
              () -> {
                assertFalse(statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS));
                assertEquals(1, statement.getUpdateCount());
                assertEquals(1L, statement.getLargeUpdateCount());
              })) {
        runnable.run();
        assertNotNull(statement.getGeneratedKeys());
        assertEquals(2, statement.getGeneratedKeys().getMetaData().getColumnCount());
        assertEquals(Types.BIGINT, statement.getGeneratedKeys().getMetaData().getColumnType(1));
        assertEquals(Types.NVARCHAR, statement.getGeneratedKeys().getMetaData().getColumnType(2));
        assertEquals("id", statement.getGeneratedKeys().getMetaData().getColumnName(1));
        assertEquals("value", statement.getGeneratedKeys().getMetaData().getColumnName(2));
        try (ResultSet keys = statement.getGeneratedKeys()) {
          assertTrue(keys.next());
          assertEquals(1L, keys.getLong(1));
          assertEquals("One", keys.getString(2));
          assertFalse(keys.next());
        }
        // There should be no more results for this statement.
        assertFalse(statement.getMoreResults());
        assertEquals(-1, statement.getUpdateCount());
      }
    }
  }

  @Test
  public void testReturnColumnNames() throws SQLException {
    String sql = "insert into test (id, value) values (1, 'One')";
    String returningClause =
        dialect == Dialect.POSTGRESQL ? "\nRETURNING \"id\"" : "\nTHEN RETURN `id`";
    mockSpanner.putStatementResult(
        StatementResult.query(
            Statement.of(sql + returningClause),
            com.google.spanner.v1.ResultSet.newBuilder()
                .setMetadata(
                    ResultSetMetadata.newBuilder()
                        .setRowType(
                            StructType.newBuilder()
                                .addFields(
                                    Field.newBuilder()
                                        .setName("id")
                                        .setType(Type.newBuilder().setCode(TypeCode.INT64).build())
                                        .build())
                                .build())
                        .build())
                .addRows(
                    ListValue.newBuilder()
                        .addValues(Value.newBuilder().setStringValue("1").build())
                        .build())
                .setStats(ResultSetStats.newBuilder().setRowCountExact(1L).build())
                .build()));

    try (Connection connection = createJdbcConnection();
        java.sql.Statement statement = connection.createStatement()) {
      for (SqlRunnable runnable :
          ImmutableList.<SqlRunnable>of(
              () -> assertEquals(1, statement.executeUpdate(sql, new String[] {"id"})),
              () -> assertEquals(1L, statement.executeLargeUpdate(sql, new String[] {"id"})),
              () -> {
                assertFalse(statement.execute(sql, new String[] {"id"}));
                assertEquals(1, statement.getUpdateCount());
                assertEquals(1L, statement.getLargeUpdateCount());
              })) {
        runnable.run();
        assertNotNull(statement.getGeneratedKeys());
        assertEquals(1, statement.getGeneratedKeys().getMetaData().getColumnCount());
        assertEquals(Types.BIGINT, statement.getGeneratedKeys().getMetaData().getColumnType(1));
        assertEquals("id", statement.getGeneratedKeys().getMetaData().getColumnName(1));
        try (ResultSet keys = statement.getGeneratedKeys()) {
          assertTrue(keys.next());
          assertEquals(1L, keys.getLong(1));
          assertFalse(keys.next());
        }
        // There should be no more results for this statement.
        assertFalse(statement.getMoreResults());
        assertEquals(-1, statement.getUpdateCount());
      }
    }
  }

  @Test
  public void testReturnColumnIndices() throws SQLException {
    String sql = "insert into test (id, value) values (1, 'One')";
    mockSpanner.putStatementResult(StatementResult.update(Statement.of(sql), 1L));

    try (Connection connection = createJdbcConnection();
        java.sql.Statement statement = connection.createStatement()) {
      // The JDBC driver silently ignores the request for column indices.
      for (SqlRunnable runnable :
          ImmutableList.<SqlRunnable>of(
              () -> assertEquals(1, statement.executeUpdate(sql, new int[] {1})),
              () -> assertEquals(1L, statement.executeLargeUpdate(sql, new int[] {1})),
              () -> {
                assertFalse(statement.execute(sql, new int[] {1}));
                assertEquals(1, statement.getUpdateCount());
                assertEquals(1L, statement.getLargeUpdateCount());
              })) {
        runnable.run();
        assertNotNull(statement.getGeneratedKeys());
        assertFalse(statement.getGeneratedKeys().next());
      }
    }
  }

  @Test
  public void testReturnGeneratedKeysForQuery() throws SQLException {
    String sql = "select * from test";
    RandomResultSetGenerator generator = new RandomResultSetGenerator(1);
    mockSpanner.putStatementResult(StatementResult.query(Statement.of(sql), generator.generate()));

    try (Connection connection = createJdbcConnection();
        java.sql.Statement statement = connection.createStatement()) {
      assertTrue(statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS));
      try (ResultSet resultSet = statement.getResultSet()) {
        assertTrue(resultSet.next());
        assertFalse(resultSet.next());
      }
      // Statements without generated keys return an empty result set.
      assertFalse(statement.getGeneratedKeys().next());
    }
  }

  @Test
  public void testReturnGeneratedKeysForDdl() throws SQLException {
    String sql = "create table test";
    addDdlResponseToSpannerAdmin();

    try (Connection connection = createJdbcConnection();
        java.sql.Statement statement = connection.createStatement()) {
      assertFalse(statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS));
      assertEquals(java.sql.Statement.SUCCESS_NO_INFO, statement.getUpdateCount());
      // Statements without generated keys return an empty result set.
      assertFalse(statement.getGeneratedKeys().next());
    }
  }

  @Test
  public void testReturnAutoGeneratedKeysForStatementWithReturning() throws SQLException {
    String sql =
        "insert into test (id, value) values (1, 'One') "
            + (dialect == Dialect.POSTGRESQL ? "RETURNING value" : "THEN RETURN value");
    mockSpanner.putStatementResult(
        StatementResult.query(
            Statement.of(sql),
            com.google.spanner.v1.ResultSet.newBuilder()
                .setMetadata(
                    ResultSetMetadata.newBuilder()
                        .setRowType(
                            StructType.newBuilder()
                                .addFields(
                                    Field.newBuilder()
                                        .setName("value")
                                        .setType(Type.newBuilder().setCode(TypeCode.STRING).build())
                                        .build())
                                .build())
                        .build())
                .addRows(
                    ListValue.newBuilder()
                        .addValues(Value.newBuilder().setStringValue("One").build())
                        .build())
                .setStats(ResultSetStats.newBuilder().setRowCountExact(1L).build())
                .build()));

    try (Connection connection = createJdbcConnection();
        java.sql.Statement statement = connection.createStatement()) {
      assertTrue(statement.execute(sql, java.sql.Statement.RETURN_GENERATED_KEYS));
      try (ResultSet resultSet = statement.getResultSet()) {
        assertTrue(resultSet.next());
        assertEquals("One", resultSet.getString(1));
        assertFalse(resultSet.next());
      }

      assertNotNull(statement.getGeneratedKeys());
      assertFalse(statement.getGeneratedKeys().next());
      // There should be no more results for this statement.
      assertFalse(statement.getMoreResults());
      assertEquals(-1, statement.getUpdateCount());
    }
  }

  private void addDdlResponseToSpannerAdmin() {
    mockDatabaseAdmin.addResponse(
        Operation.newBuilder()
            .setDone(true)
            .setResponse(Any.pack(Empty.getDefaultInstance()))
            .setMetadata(Any.pack(UpdateDatabaseDdlMetadata.getDefaultInstance()))
            .build());
  }
}
